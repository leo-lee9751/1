{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":2882784,"sourceType":"datasetVersion","datasetId":1748489}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-18T17:35:36.806667Z","iopub.execute_input":"2024-11-18T17:35:36.807529Z","iopub.status.idle":"2024-11-18T17:35:52.620161Z","shell.execute_reply.started":"2024-11-18T17:35:36.807484Z","shell.execute_reply":"2024-11-18T17:35:52.619288Z"}},"outputs":[],"execution_count":null},{"cell_type":"raw","source":"","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torchvision import datasets, transforms, models\nfrom torch.utils.data import DataLoader\nimport matplotlib.pyplot as plt\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T17:36:00.904172Z","iopub.execute_input":"2024-11-18T17:36:00.904791Z","iopub.status.idle":"2024-11-18T17:36:00.909557Z","shell.execute_reply.started":"2024-11-18T17:36:00.904758Z","shell.execute_reply":"2024-11-18T17:36:00.908427Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-17T22:11:21.057404Z","iopub.execute_input":"2024-11-17T22:11:21.057832Z","iopub.status.idle":"2024-11-17T22:11:25.023566Z","shell.execute_reply.started":"2024-11-17T22:11:21.057794Z","shell.execute_reply":"2024-11-17T22:11:25.022598Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-17T22:16:26.167783Z","iopub.execute_input":"2024-11-17T22:16:26.168194Z","iopub.status.idle":"2024-11-17T22:16:26.184572Z","shell.execute_reply.started":"2024-11-17T22:16:26.168158Z","shell.execute_reply":"2024-11-17T22:16:26.183624Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nfrom PIL import Image\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms, datasets\n\n# Define transformations\ntransform = transforms.Compose([\n    transforms.Resize((128, 128)),\n    transforms.ToTensor(),\n    transforms.Normalize((0.5,), (0.5,))  # Normalize with mean=0.5 and std=0.5\n])\n\n# Define a custom dataset for test folder\nclass TestDataset(Dataset):\n    def __init__(self, folder_path, transform=None):\n        self.folder_path = folder_path\n        self.transform = transform\n        self.image_paths = [\n            os.path.join(folder_path, img)\n            for img in os.listdir(folder_path)\n            if img.endswith(('jpg', 'jpeg', 'png'))  # Filter for image files\n        ]\n\n    def __len__(self):\n        return len(self.image_paths)\n\n    def __getitem__(self, idx):\n        img_path = self.image_paths[idx]\n        try:\n            image = Image.open(img_path).convert('RGB')  # Open and convert to RGB\n        except Exception as e:\n            print(f\"Error loading image {img_path}: {e}\")\n            return None, -1  # Return dummy data in case of an error\n\n        if self.transform:\n            image = self.transform(image)\n\n        return image, -1  # Assign dummy label\n\n# Create train dataset and DataLoader\ntrain_dataset = datasets.ImageFolder(\n    root='/kaggle/input/iqothnccd-lung-cancer-dataset/The IQ-OTHNCCD lung cancer dataset/The IQ-OTHNCCD lung cancer dataset',\n    transform=transform\n)\ntrain_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n\n# Create test dataset and DataLoader\ntest_dataset = TestDataset(\n    folder_path='/kaggle/input/iqothnccd-lung-cancer-dataset/Test cases',\n    transform=transform\n)\ntest_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n\n# Print dataset info\nprint(f\"Number of train samples: {len(train_dataset)}\")\nprint(f\"Number of test samples: {len(test_dataset)}\")\n\n# Iterate through the test data\nfor images, labels in test_loader:\n    print(images.size(), labels)  # Labels will be all -1\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T17:36:03.925089Z","iopub.execute_input":"2024-11-18T17:36:03.925395Z","iopub.status.idle":"2024-11-18T17:36:06.704407Z","shell.execute_reply.started":"2024-11-18T17:36:03.925370Z","shell.execute_reply":"2024-11-18T17:36:06.703418Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from torchvision import models\n\nmodel = models.resnet18(pretrained=True)\nmodel.fc = nn.Linear(model.fc.in_features, len(train_dataset.classes))  # Adjust final layer\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch.optim as optim\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T17:31:35.691932Z","iopub.execute_input":"2024-11-18T17:31:35.692489Z","iopub.status.idle":"2024-11-18T17:31:35.697249Z","shell.execute_reply.started":"2024-11-18T17:31:35.692456Z","shell.execute_reply":"2024-11-18T17:31:35.696253Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T17:31:37.107138Z","iopub.execute_input":"2024-11-18T17:31:37.108050Z","iopub.status.idle":"2024-11-18T17:31:37.427664Z","shell.execute_reply.started":"2024-11-18T17:31:37.107992Z","shell.execute_reply":"2024-11-18T17:31:37.426689Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"num_epochs = 10\n\nfor epoch in range(num_epochs):\n    model.train()\n    running_loss = 0.0\n\n    for images, labels in train_loader:\n        images, labels = images.to(device), labels.to(device)\n\n        optimizer.zero_grad()  # Clear gradients\n        outputs = model(images)  # Forward pass\n        loss = criterion(outputs, labels)  # Compute loss\n        loss.backward()  # Backward pass\n        optimizer.step()  # Update weights\n\n        running_loss += loss.item()\n\n    print(f\"Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(train_loader):.4f}\")\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T17:34:41.557931Z","iopub.execute_input":"2024-11-18T17:34:41.558269Z","iopub.status.idle":"2024-11-18T17:34:41.803753Z","shell.execute_reply.started":"2024-11-18T17:34:41.558239Z","shell.execute_reply":"2024-11-18T17:34:41.802581Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\n\n# Helper function to denormalize images and convert tensors to NumPy arrays\ndef denormalize(image, mean=0.5, std=0.5):\n    image = image * std + mean  # Reverse normalization\n    return np.clip(image.numpy(), 0, 1)  # Ensure values are in the [0, 1] range\n\n# Visualization function\ndef visualize_predictions(model, data_loader, class_names, device, num_images=8):\n    \"\"\"\n    Visualize predictions from the model along with input images.\n    \n    Args:\n        model: Trained PyTorch model\n        data_loader: DataLoader for test/validation set\n        class_names: List of class names\n        device: 'cuda' or 'cpu'\n        num_images: Number of images to visualize\n    \"\"\"\n    model.eval()  # Set model to evaluation mode\n    images_shown = 0  # Counter for displayed images\n    \n    plt.figure(figsize=(12, 6))  # Set the figure size\n    \n    with torch.no_grad():  # Disable gradient computation\n        for images, labels in data_loader:\n            images, labels = images.to(device), labels.to(device)\n            outputs = model(images)  # Get model predictions\n            _, predicted = torch.max(outputs, 1)  # Convert outputs to predicted labels\n            \n            for i in range(images.size(0)):\n                if images_shown >= num_images:\n                    break\n                \n                # Denormalize and move to CPU for visualization\n                img = denormalize(images[i].cpu())\n                \n                # Plot the image\n                plt.subplot(2, num_images // 2, images_shown + 1)\n                plt.imshow(np.transpose(img, (1, 2, 0)))  # Convert from CHW to HWC format\n                plt.title(f\"Pred: {class_names[predicted[i]]}\\nTrue: {class_names[labels[i]]}\")\n                plt.axis('off')\n                \n                images_shown += 1\n            \n            if images_shown >= num_images:\n                break\n    \n    plt.tight_layout()\n    plt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T17:30:29.100156Z","iopub.execute_input":"2024-11-18T17:30:29.100968Z","iopub.status.idle":"2024-11-18T17:30:29.108455Z","shell.execute_reply.started":"2024-11-18T17:30:29.100935Z","shell.execute_reply":"2024-11-18T17:30:29.107534Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torchvision import datasets, transforms, models\nfrom torch.utils.data import Dataset, DataLoader\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom PIL import Image\n\n#dont rly need cause I don't have nvidia\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\n# transformations\ntransform = transforms.Compose([\n    transforms.Resize((128, 128)),\n    transforms.ToTensor(),\n    transforms.Normalize((0.5,), (0.5,))  # Normalize with mean=0.5 and std=0.5\n])\n\n# Custom Dataset cause not divided in subfolders\nclass TestDataset(Dataset):\n    def __init__(self, folder_path, transform=None):\n        self.folder_path = folder_path\n        self.transform = transform\n        self.image_paths = [\n            os.path.join(folder_path, img)\n            for img in os.listdir(folder_path)\n            if img.endswith(('jpg', 'jpeg', 'png'))  # Filter for image files\n        ]\n\n    def __len__(self):\n        return len(self.image_paths)\n\n    def __getitem__(self, idx):\n        img_path = self.image_paths[idx]\n        image = Image.open(img_path).convert('RGB')  # Load and convert to RGB\n        if self.transform:\n            image = self.transform(image)\n        label = -1  # Assign dummy label since test set is unlabeled\n        return image, label\n\n# Dataset and DataLoader\ntrain_dataset = datasets.ImageFolder(\n    root='/kaggle/input/iqothnccd-lung-cancer-dataset/The IQ-OTHNCCD lung cancer dataset/The IQ-OTHNCCD lung cancer dataset',\n    transform=transform\n)\ntest_dataset = TestDataset(\n    folder_path='/kaggle/input/iqothnccd-lung-cancer-dataset/Test cases',\n    transform=transform\n)\n\ntrain_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\ntest_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n\nclass_names = train_dataset.classes  # Extract class names\nprint(f\"Classes: {class_names}\")\n\n# Model\nmodel = models.resnet18(pretrained=True)\nmodel.fc = nn.Linear(model.fc.in_features, len(class_names))  # Adjust the final layer\nmodel.to(device)\n\n# Loss Function and Optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# Training Loop\nnum_epochs = 10\nfor epoch in range(num_epochs):\n    model.train()\n    running_loss = 0.0\n    correct = 0\n    total = 0\n\n    for images, labels in train_loader:\n        images, labels = images.to(device), labels.to(device)\n\n        # Forward pass\n        optimizer.zero_grad()\n        outputs = model(images)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        running_loss += loss.item()\n\n        # Calculate accuracy\n        _, predicted = torch.max(outputs, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\n    epoch_loss = running_loss / len(train_loader)\n    epoch_accuracy = 100 * correct / total\n    print(f\"Epoch [{epoch+1}/{num_epochs}], Loss: {epoch_loss:.4f}, Accuracy: {epoch_accuracy:.2f}%\")\n\n# Save the Model\ntorch.save(model.state_dict(), \"model.pth\")\n\n# Evaluation Function\ndef evaluate_model(model, data_loader, device):\n    model.eval()\n    correct = 0\n    total = 0\n\n    with torch.no_grad():\n        for images, labels in data_loader:\n            images = images.to(device)\n            outputs = model(images)\n            _, predicted = torch.max(outputs, 1)\n            total += labels.size(0)\n            if labels[0] != -1:  # Only calculate accuracy if labels are available\n                correct += (predicted == labels).sum().item()\n\n    accuracy = 100 * correct / total if total > 0 else None\n    print(f\"Accuracy: {accuracy:.2f}%\" if accuracy else \"No ground truth labels available.\")\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T17:38:31.925575Z","iopub.execute_input":"2024-11-18T17:38:31.925903Z","iopub.status.idle":"2024-11-18T17:40:04.491882Z","shell.execute_reply.started":"2024-11-18T17:38:31.925874Z","shell.execute_reply":"2024-11-18T17:40:04.490835Z"}},"outputs":[],"execution_count":null}]}